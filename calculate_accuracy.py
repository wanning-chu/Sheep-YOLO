import numpy as np

# 输入混淆矩阵
# YOLOV8n data1
# confusion_matrix = np.array([
#     [238, 1, 0, 6, 0, 0, 0, 3, 14],
#     [5, 461, 0, 0, 0, 0, 0, 0, 1],
#     [0, 0, 57, 0, 0, 0, 0, 0, 0],
#     [2, 0, 0, 148, 7, 0, 0, 3, 7],
#     [0, 0, 0, 4, 21, 0, 0, 1, 3],
#     [0, 0, 0, 0, 0, 108, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 56, 0, 4],
#     [0, 0, 0, 0, 0, 0, 0, 41, 3],
#     [0, 0, 0, 1, 0, 0, 2, 0, 0],
# ])


# YOLOV8n data2
# confusion_matrix = np.array([
#     [47, 2, 0, 1, 1, 0, 0, 0, 4],
#     [0, 155, 0, 0, 0, 0, 0, 0, 2],
#     [0, 0, 57, 0, 0, 0, 0, 0, 0],
#     [4, 0, 0, 143, 3, 0, 0, 1, 8],
#     [0, 0, 0, 3, 25, 0, 0, 1, 3],
#     [0, 0, 0, 0, 0, 108, 0, 0, 1],
#     [0, 0, 0, 0, 0, 0, 56, 0, 3],
#     [0, 0, 0, 2, 0, 0, 0, 43, 6],
#     [0, 0, 0, 4, 0, 0, 2, 0, 0],
# ])

# YOLOV8l
# confusion_matrix = np.array([
#     [50, 0, 0, 1, 1, 0, 0, 0, 0],
#     [0, 157, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 57, 0, 0, 0, 0, 0, 0],
#     [1, 0, 0, 146, 4, 0, 0, 3, 9],
#     [0, 0, 0, 2, 23, 0, 0, 1, 1],
#     [0, 0, 0, 0, 0, 108, 0, 0, 1],
#     [0, 0, 0, 0, 0, 0, 56, 0, 1],
#     [0, 0, 0, 2, 1, 0, 0, 41, 3],
#     [0, 0, 0, 2, 0, 0, 2, 0, 0],
# ])

# YOLOV8s
# confusion_matrix = np.array([
#     [50, 0, 0, 0, 0, 0, 0, 0, 5],
#     [0, 157, 0, 0, 0, 0, 0, 0, 1],
#     [0, 0, 57, 0, 0, 0, 0, 0, 0],
#     [1, 0, 0, 144, 5, 0, 0, 2, 8],
#     [0, 0, 0, 3, 24, 0, 0, 1, 1],
#     [0, 0, 0, 0, 0, 108, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 56, 0, 1],
#     [0, 0, 0, 0, 0, 0, 0, 42, 3],
#     [0, 0, 0, 6, 0, 0, 2, 0, 0],
# ])

# #YOLOv8x
# confusion_matrix = np.array([
#     [49, 0, 0, 1, 1, 0, 0, 0, 1],
#     [1, 157, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 57, 0, 0, 0, 0, 0, 0],
#     [1, 0, 0, 149, 6, 0, 0, 2, 6],
#     [0, 0, 0, 1, 22, 0, 0, 1, 2],
#     [0, 0, 0, 0, 0, 108, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 56, 0, 3],
#     [0, 0, 0, 1, 0, 0, 0, 42, 4],
#     [0, 0, 0, 1, 0, 0, 2, 0, 0],
# ])

# 第二次实验

# YOLOv10n data1 val
# confusion_matrix = np.array([
#     [231, 2, 0, 9, 0, 0, 0, 3, 0],
#     [9, 459, 0, 0, 0, 0, 0, 0, 0],
#     [1, 0, 298, 0, 0, 0, 0, 1, 0],
#     [10, 0, 1, 706, 40, 0, 0, 19, 0],
#     [0, 0, 0, 16, 108, 0, 0, 0, 18],
#     [0, 0, 0, 0, 0, 267, 0, 0, 34],
#     [0, 0, 0, 1, 0, 0, 117, 0, 0],
#     [3, 0, 1, 21, 4, 0, 0, 374, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0],
# ])

# YOLOv10n data2 val
# confusion_matrix = np.array([
#     [199, 0, 0, 4, 2, 0, 0, 2, 0],
#     [10, 476, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 270, 1, 0, 0, 0, 1, 0],
#     [6, 0, 0, 692, 22, 0, 0, 19, 0],
#     [0, 0, 0, 11, 94, 0, 0, 1, 0],
#     [0, 0, 0, 1, 0, 320, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 113, 0, 0],
#     [6, 0, 0, 21, 1, 0, 0, 366, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0],
# ])

# YOLOv10n data3 val
# confusion_matrix = np.array([
#     [260, 6, 0, 0, 1, 0, 0, 3, 0],
#     [4, 504, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 300, 0, 0, 0, 0, 0, 0],
#     [7, 0, 1, 682, 12, 1, 0, 16, 0],
#     [0, 0, 0, 18, 120, 0, 0, 3, 0],
#     [0, 0, 0, 2, 0, 290, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 119, 0, 0],
#     [3, 0, 1, 12, 0, 0, 0, 395, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0],
# ])

# YOLOv10n data4 val
# confusion_matrix = np.array([
#     [262, 2, 0, 10, 0, 0, 0, 2, 0],
#     [13, 489, 0, 0, 0, 0, 0, 0, 13],
#     [0, 0, 261, 0, 0, 0, 0, 0, 0],
#     [7, 0, 0, 726, 23, 0, 0, 20, 0],
#     [0, 0, 0, 5, 93, 0, 0, 2, 0],
#     [0, 0, 0, 2, 0, 321, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 114, 0, 0],
#     [7, 0, 1, 18, 1, 0, 0, 369, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0],
# ])

# YOLOv10n data5 val
# confusion_matrix = np.array([
#     [226, 7, 0, 3, 1, 0, 0, 4, 0],
#     [9, 500, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 312, 0, 0, 0, 0, 1, 0],
#     [14, 0, 0, 719, 31, 2, 0, 27, 0],
#     [1, 0, 0, 13, 116, 0, 0, 1, 0],
#     [0, 0, 0, 0, 0, 308, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 98, 0, 0],
#     [2, 0, 0, 20, 3, 0, 0, 335, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0],
# ])

# # YOLOv10s data1 val
# confusion_matrix = np.array([
#     [236, 1, 0, 8, 0, 0, 0, 3, 13],
#     [5, 461, 0, 0, 0, 0, 0, 0, 12],
#     [0, 0, 298, 0, 0, 0, 0, 1, 9],
#     [10, 0, 2, 719, 29, 0, 0, 17, 41],
#     [0, 0, 0, 13, 121, 0, 0, 0, 12],
#     [0, 0, 0, 0, 0, 275, 0, 0, 8],
#     [0, 0, 0, 0, 0, 0, 120, 0, 13],
#     [1, 0, 0, 15, 3, 0, 0, 377, 16],
#     [9, 0, 1, 8, 1, 1, 11, 6, 0],
# ])

# YOLOv10s data2 val
# confusion_matrix = np.array([
#     [207, 5, 0, 11, 2, 0, 0, 2, 12],
#     [5, 472, 0, 0, 0, 0, 0, 0, 12],
#     [0, 0, 272, 2, 0, 0, 0, 0, 12],
#     [4, 0, 0, 702, 22, 1, 0, 13, 33],
#     [1, 0, 0, 9, 95, 0, 0, 2, 9],
#     [0, 0, 0, 2, 0, 322, 0, 0, 10],
#     [0, 0, 0, 0, 0, 0, 126, 0, 12],
#     [4, 0, 0, 7, 0, 0, 0, 374, 14],
#     [1, 0, 0, 2, 2, 3, 7, 2, 0],
# ])

# # YOLOv10s data3 val
# confusion_matrix = np.array([
#     [249, 4, 0, 2, 0, 0, 0, 2, 20],
#     [10, 505, 0, 0, 0, 0, 0, 0, 11],
#     [0, 0, 301, 0, 0, 0, 0, 0, 12],
#     [4, 0, 0, 688, 16, 2, 0, 16, 35],
#     [0, 0, 0, 10, 113, 0, 0, 3, 13],
#     [0, 0, 0, 0, 0, 288, 0, 0, 11],
#     [0, 0, 0, 0, 0, 0, 118, 0, 17],
#     [5, 0, 1, 13, 2, 0, 0, 395, 23],
#     [8, 1, 0, 7, 3, 3, 7, 1, 0],
# ])

# YOLOv10s data4 val
# confusion_matrix = np.array([
#     [266, 2, 0, 9, 0, 0, 0, 4, 17],
#     [13, 489, 0, 0, 0, 0, 0, 0, 8],
#     [0, 0, 263, 0, 0, 0, 0, 0, 8],
#     [4, 0, 0, 724, 14, 0, 0, 19, 39],
#     [1, 0, 0, 7, 103, 0, 0, 2, 7],
#     [0, 0, 0, 3, 0, 328, 0, 0, 18],
#     [0, 0, 0, 0, 0, 0, 125, 0, 17],
#     [6, 0, 0, 14, 0, 0, 0, 369, 14],
#     [4, 2, 1, 13, 1, 0, 6, 2, 0],
# ])

# # YOLOv10s data5 val
# confusion_matrix = np.array([
#     [233, 5, 0, 12, 0, 0, 0, 5, 18],
#     [4, 502, 0, 0, 0, 0, 0, 0, 5],
#     [0, 0, 312, 0, 0, 0, 0, 1, 1],
#     [16, 0, 0, 725, 29, 1, 1, 22, 56],
#     [1, 0, 0, 8, 118, 0, 0, 0, 13],
#     [0, 0, 0, 0, 0, 310, 0, 0, 15],
#     [0, 0, 0, 0, 0, 0, 106, 0, 13],
#     [0, 0, 0, 8, 0, 0, 0, 337, 17],
#     [8, 0, 0, 7, 4, 2, 17, 9, 0],
# ])

# YOLOv10m data1 val
# confusion_matrix = np.array([
#     [237, 1, 1, 5, 0, 0, 0, 3, 0],
#     [6, 461, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 293, 0, 0, 0, 0, 0, 0],
#     [8, 0, 1, 710, 36, 0, 0, 13, 0],
#     [0, 0, 0, 11, 114, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 276, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 117, 0, 0],
#     [1, 0, 1, 22, 2, 0, 0, 381, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0],
# ])

# YOLOv10m data2 val
# confusion_matrix = np.array([
#     [201, 3, 0, 6, 1, 0, 0, 1, 0],
#     [7, 473, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 269, 2, 0, 0, 0, 0, 0],
#     [6, 0, 0, 689, 23, 1, 0, 14, 0],
#     [0, 0, 0, 6, 95, 0, 0, 1, 0],
#     [0, 0, 0, 1, 0, 323, 0, 1, 0],
#     [0, 0, 0, 0, 0, 0, 124, 0, 0],
#     [6, 0, 0, 18, 0, 0, 0, 374, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0],
# ])

# YOLOv10m data3 val
# confusion_matrix = np.array([
#     [251, 5, 0, 4, 1, 0, 0, 1, 0],
#     [8, 505, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 301, 0, 0, 0, 0, 0, 0],
#     [8, 0, 0, 682, 14, 1, 0, 13, 0],
#     [0, 0, 0, 15, 118, 0, 0, 1, 0],
#     [0, 0, 0, 2, 0, 288, 0, 0, 0],
#     [1, 0, 0, 0, 0, 0, 117, 0, 0],
#     [3, 0, 1, 5, 0, 0, 0, 399, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0],
# ])

# YOLOv10m data4 val
# confusion_matrix = np.array([
#     [261, 4, 0, 8, 0, 0, 0, 1, 0],
#     [11, 486, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 257, 0, 0, 0, 0, 0, 0],
#     [6, 0, 0, 716, 12, 0, 0, 18, 0],
#     [0, 0, 0, 15, 105, 0, 0, 1, 0],
#     [0, 0, 0, 2, 0, 328, 0, 0, 0],
#     [0, 0, 0, 1, 0, 0, 124, 0, 0],
#     [7, 0, 0, 16, 0, 0, 0, 373, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0],
# ])

# YOLOv10m data5 val
confusion_matrix = np.array([
    [228, 5, 0, 5, 0, 0, 0, 4, 0],
    [9, 501, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 307, 1, 0, 0, 0, 1, 0],
    [16, 0, 0, 724, 29, 0, 0, 19, 0],
    [1, 0, 0, 4, 116, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 313, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 106, 0, 0],
    [2, 0, 0, 13, 2, 0, 1, 346, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
])

# 排除"background"类的行和列
# 获取除最后一行和最后一列之外的所有行和列
confusion_matrix_no_bg = confusion_matrix[:-1, :-1]

# 2-TP/FP/FN的计算（不需要计算TN，因为TN在多类别中通常不直接计算）
FP = confusion_matrix_no_bg.sum(axis=0) - np.diag(confusion_matrix_no_bg)
FN = confusion_matrix_no_bg.sum(axis=1) - np.diag(confusion_matrix_no_bg)
TP = np.diag(confusion_matrix_no_bg)

# 将这些值转换为浮点数以进行后续计算
FP = FP.astype(float)
FN = FN.astype(float)
TP = TP.astype(float)

# 3-其他的性能参数的计算
TPRs = TP / (TP + FN)  # Sensitivity/ hit rate/ recall/ true positive rate
PPVs = TP / (TP + FP)  # Precision/ positive predictive value
FNRs = FN / (TP + FN)  # False negative rate
FDRs = FP / (TP + FP)  # False discovery rate

# 计算F1值
F1s = 2 * (TPRs * PPVs) / (TPRs + PPVs)
# 如果需要计算全局的F1值（假设所有类别权重相同），可以取平均
global_F1 = np.mean(F1s)

# 计算全局准确率（不包括"background"类）
total_correct = TP.sum()
total_samples_no_bg = confusion_matrix_no_bg.sum()
ACC = total_correct / total_samples_no_bg  # accuracy of the model (excluding background class)

# 打印结果
print("TP:", TP)
print("FP:", FP)
print("FN:", FN)
print("TPRs:", TPRs)
print("PPVs:", PPVs)
print("FNRs:", FNRs)
print("FDRs:", FDRs)
print("ACC (excluding background class):", ACC)

# 打印结果
print("F1s per class:", F1s)
print("Global F1 (assuming equal class weights):", global_F1)

# Accuracy{YOLOv8n:0.969; YOLOv8m:0.972; YOLOv8l:0.976; YOLOv8s:0.982; YOLOv8x:0.977}
# F1-Score{YOLOv8n:0.951; YOLOv8m:0.961; YOLOv8l:0.961; YOLOv8s:0.970; YOLOv8x:0.963}